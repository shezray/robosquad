{"version":3,"sources":["Components/Card.js","Components/CardList.js","Components/SearchBox.js","Components/Scroll.js","Components/ErrorBoundary.js","Containers/App.js","serviceWorker.js","index.js"],"names":["Card","name","email","id","className","alt","src","CardList","robots","map","user","i","key","SearchBox","searchfield","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","height","children","ErrorBoundary","state","hasError","error","info","this","setState","Component","App","onSearchChange","event","target","value","fetch","then","response","json","users","filteredRobots","filter","robot","toLowerCase","includes","length","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"gOAceA,EAZF,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,KAAMC,EAAgB,EAAhBA,MAAOC,EAAS,EAATA,GAC5B,OACC,yBAAKC,UAAW,qDACd,yBAAKC,IAAI,SAASC,IAAG,+BAA2BH,EAA3B,cACrB,6BACC,4BAAKF,GACL,2BAAIC,MCcMK,EAnBE,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OACnB,OACC,6BAEIA,EAAOC,KAAI,SAACC,EAAMC,GAClB,OACD,kBAAC,EAAD,CACGC,IAAKD,EACRR,GAAIK,EAAOG,GAAGR,GACdF,KAAMO,EAAOG,GAAGV,KAChBC,MAAOM,EAAOG,GAAGT,aCEPW,EAbG,SAAC,GAAiC,EAA/BC,YAAgC,IAAnBC,EAAkB,EAAlBA,aACjC,OACE,yBAAKX,UAAU,OAChB,2BACEA,UAAU,+BACVY,KAAK,SACLC,YAAY,gBACZC,SAAUH,MCECI,EATA,SAACC,GACd,OACD,yBAAKC,MAAQ,CAACC,UAAW,SAAUC,OAAQ,UACxCH,EAAMI,WCkBKC,E,kDApBd,WAAYL,GAAQ,IAAD,8BAChB,cAAMA,IACDM,MAAQ,CACbC,UAAU,GAHM,E,8DAOFC,EAAOC,GACxBC,KAAKC,SAAS,CAAEJ,UAAU,M,+BAK1B,OAAIG,KAAKJ,MAAMC,SACL,uDAEHG,KAAKV,MAAMI,a,GAjBSQ,aC8CbC,E,kDAxCb,aAAe,IAAD,8BACf,gBAaDC,eAAiB,SAACC,GACjB,EAAKJ,SAAS,CAAEjB,YAAaqB,EAAMC,OAAOC,SAb1C,EAAKX,MAAQ,CACRlB,OAAQ,GACRM,YAAa,IAJH,E,gEAQK,IAAD,OAClBwB,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAGA,EAASC,UACzBF,MAAK,SAAAG,GAAK,OAAI,EAAKX,SAAS,CAAEvB,OAAQkC,S,+BAO/B,IAAD,EACyBZ,KAAKJ,MAA7BlB,EADD,EACCA,OAAQM,EADT,EACSA,YACV6B,EAAiBnC,EAAOoC,QAAO,SAAAC,GACjC,OAAOA,EAAM5C,KAAK6C,cAAcC,SAASjC,EAAYgC,kBAGzD,OAAQtC,EAAOwC,OAGX,yBAAK5C,UAAW,MACd,yCACA,kBAAC,EAAD,CAAWW,aAAce,KAAKI,iBAC7B,kBAAC,EAAD,KACE,kBAAC,EAAD,KACC,kBAAC,EAAD,CAAU1B,OAAUmC,OAP9B,2C,GA1BgBX,aCKEiB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,YCTNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBrB,MAAK,SAAAsB,GACJA,EAAaC,gBAEdC,OAAM,SAAAnC,GACLoC,QAAQpC,MAAMA,EAAMqC,a","file":"static/js/main.084b65f7.chunk.js","sourcesContent":["import React from 'react';\n\nconst Card = ({ name, email, id }) => {\n\treturn(\n\t\t<div className= 'tc bg-light-pink dib br3 pa3 ma2 grow bw2 shadow5'>\n\t\t  <img alt='robots' src= {`https://robohash.org/${id}?200x200`} />\n\t\t  <div>\n\t\t  \t<h2>{name}</h2>\n\t\t  \t<p>{email}</p>\n\t\t  </div>\n\t\t</div>\n\t);\n}\n\nexport default Card;","import React from 'react';\nimport Card from './Card';\n\nconst CardList = ({ robots }) => {\n\treturn (\n\t\t<div>\n\t\t{\n\t\t    robots.map((user, i) => {\n\t\t\t   return (\n\t\t\t\t <Card \n\t\t\t\t    key={i} \n\t\t\t\t\tid={robots[i].id} \n\t\t\t\t\tname={robots[i].name} \n\t\t\t\t\temail={robots[i].email} \n\t\t\t\t\t/>\n\t\t\t\t);\n\t\t\t  })\n\t\t    }\n\t  </div>\n    );\n}\n\nexport default CardList;","import React from 'react';\n\nconst SearchBox = ({ searchfield, searchChange}) => {\n\treturn (\n\t  <div className='pa2'>\n\t\t<input \n\t\t  className='pa3 ba bw2 b--white  bg-pink'\n\t\t  type='search' \n\t\t  placeholder='search robots' \n\t\t  onChange={searchChange}\n\t\t  />\n\t  </div>\n\t\t);\n}\n\nexport default SearchBox;","import React from 'react';\n\nconst Scroll = (props) => {\n  return (\n\t<div style ={{overflowY: 'scroll', height: '500px'}}>\n\t  {props.children}\n\t</div>\n   );\n\n};\n\nexport default Scroll;","import React, { Component } from 'react';\n\nclass ErrorBoundary extends Component {\n\tconstructor(props) {\n\t   super(props);\n\t   this.state = { \n\t\t  hasError: false\n\t\t}\n\t}\n\ncomponentDidCatch(error, info) {\n\tthis.setState({ hasError: true })\n\n}\n\nrender() {\n\tif (this.state.hasError) {\n\t   return <h1>Ooops. That is not good</h1>\n\t}\n\treturn this.props.children\n  }\n}\n\nexport default ErrorBoundary;","import React, { Component } from 'react';\nimport CardList from '../Components/CardList';\nimport SearchBox from '../Components/SearchBox';\nimport Scroll from '../Components/Scroll';\nimport ErrorBoundary from '../Components/ErrorBoundary';\n\n\nclass App extends Component {\n  constructor() {\n\tsuper()\n\tthis.state = {\n   \t  robots: [],\n   \t  searchfield: ''\n\t}\n  }\n\ncomponentDidMount() {\n  fetch('https://jsonplaceholder.typicode.com/users')\n  .then(response=> response.json())\n  .then(users => this.setState({ robots: users}));\n}\n\nonSearchChange = (event) => {\n\tthis.setState({ searchfield: event.target.value })\n}\n\t\nrender() {\n  const { robots, searchfield } = this.state;\n  const filteredRobots = robots.filter(robot => {\n      return robot.name.toLowerCase().includes(searchfield.toLowerCase());\n   })\n\n  return !robots.length ?\n  <h1>Loading</h1> :\n    ( \n      <div className= 'tc'>\n\t       <h1>RoboSquad</h1>\n\t       <SearchBox searchChange={this.onSearchChange} />\n         <Scroll>\n           <ErrorBoundary>\n\t           <CardList robots = {filteredRobots} />\n           </ErrorBoundary>\n          </Scroll>\n      </div>\n    );   \n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\nimport './Containers/App.css';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\nserviceWorker.unregister();\n"],"sourceRoot":""}